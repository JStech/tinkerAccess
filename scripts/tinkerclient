#!/bin/sh

### BEGIN INIT INFO
# Provides:          tinkerclient
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: tinkerclient
# Description:       client for reading badge
### END INIT INFO

# http://blog.scphillips.com/posts/2013/07/getting-a-python-script-to-run-in-the-background-as-a-service-on-boot/

# Change the next 3 lines to suit where you install your script and what you want to call it
DIR=/opt/tinkeraccess
DAEMON=$DIR/client.py
DAEMON_NAME=tinkerAccessClient

# Add any command line options for your daemon here
DAEMON_OPTS=""

# This next line determines what user the script runs as.
# Root generally not recommended but necessary if you are using the Raspberry Pi GPIO from Python.
DAEMON_USER=root

# The process ID of the script when it runs is stored here:
PIDFILE=/var/run/$DAEMON_NAME.pid

. /lib/lsb/init-functions

do_start () {
    log_daemon_msg "Starting system $DAEMON_NAME daemon"
    start-stop-daemon --start -d $DIR --background --pidfile $PIDFILE --make-pidfile --user $DAEMON_USER --chuid $DAEMON_USER --startas $DAEMON -- $DAEMON_OPTS
    log_end_msg $?
}
do_stop () {
    log_daemon_msg "Stopping system $DAEMON_NAME daemon"
    start-stop-daemon --stop --pidfile $PIDFILE --retry 10
    log_end_msg $?
}

do_update() {
    if [ -d /tmp/updateTA ] ; then
        rm -rf /tmp/updateTA
    fi

    {
    mkdir /tmp/updateTA
    cd /tmp/updateTA

    # download the files we want to update
    wget https://raw.githubusercontent.com/TinkerMill/tinkerAccess/master/client.py
    wget https://raw.githubusercontent.com/TinkerMill/tinkerAccess/master/lcdModule.py

    # if both files are not empty, then install them
    if [ -s client.py -a -s lcdModule.py ] ; then
        cp client.py $DIR
        cp lcdModule.py $DIR
    fi

    rm -rf /tmp/updateTA
    } > /tmp/updateLog

}

case "$1" in

    stop)
        do_stop
        ;;

    start)
        do_update
        do_start
        ;;

    restart|reload|force-reload)
        do_stop
        do_start
        ;;

    update)
        do_update
        ;;

    status)
        status_of_proc "$DAEMON_NAME" "$DAEMON" && exit 0 || exit $?
        ;;

    *)
        echo "Usage: /etc/init.d/$DAEMON_NAME {start|stop|restart|status}"
        exit 1
        ;;

esac
exit 0
